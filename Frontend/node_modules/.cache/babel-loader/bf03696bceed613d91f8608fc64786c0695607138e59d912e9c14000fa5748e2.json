{"ast":null,"code":"import axios from 'axios';\n\n// The base URL of your Rails application\nconst API_BASE_URL = 'http://localhost:3000/api';\n\n// Create an axios instance for making API requests\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// --- Helper function for improved error handling ---\nconst getErrorMessage = error => {\n  if (error.response && error.response.data && error.response.data.message) {\n    return error.response.data.message;\n  }\n  if (error.response && error.response.statusText) {\n    return error.response.statusText;\n  }\n  return 'An unexpected error occurred.';\n};\nclass APIService {\n  // ... existing Task methods (getAllTasks, getTaskById, etc.) ...\n\n  /**\n   * Fetches all tasks from the backend.\n   */\n  static async getAllTasks() {\n    try {\n      const response = await apiClient.get('/tasks');\n      return {\n        success: true,\n        data: response.data,\n        total: response.data.length\n      };\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  /**\n   * Fetches a single task by its ID.\n   * @param {number} id The ID of the task.\n   */\n  static async getTaskById(id) {\n    try {\n      const response = await apiClient.get(`/tasks/${id}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error(`Error fetching task ${id}:`, error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  /**\n   * Creates a new task.\n   * @param {object} taskData The data for the new task.\n   */\n  static async createTask(taskData) {\n    try {\n      const payload = {\n        number: taskData.number,\n        title: taskData.title,\n        status: taskData.status,\n        priority: taskData.priority,\n        assignee: taskData.assignee,\n        description: taskData.description,\n        description_rich_text: taskData.descriptionRichText,\n        due_date: taskData.due_date\n      };\n      if (payload.due_date) {\n        payload.due_date = new Date(`${payload.due_date}T12:00:00`).toISOString();\n      } else {\n        payload.due_date = null;\n      }\n      const response = await apiClient.post('/tasks', {\n        task: payload\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error('Error creating task:', error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  /**\n   * Updates an existing task.\n   * @param {number} id The ID of the task to update.\n   * @param {object} taskData The new data for the task.\n   */\n  static async updateTask(id, taskData) {\n    try {\n      const payload = {\n        number: taskData.number,\n        title: taskData.title,\n        status: taskData.status,\n        priority: taskData.priority,\n        assignee: taskData.assignee,\n        description: taskData.description,\n        description_rich_text: taskData.descriptionRichText,\n        due_date: taskData.due_date\n      };\n      if (payload.due_date) {\n        payload.due_date = new Date(`${payload.due_date}T12:00:00`).toISOString();\n      } else {\n        payload.due_date = null;\n      }\n      const response = await apiClient.put(`/tasks/${id}`, {\n        task: payload\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error(`Error updating task ${id}:`, error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  /**\n   * Deletes a task by its ID (soft delete).\n   * @param {number} id The ID of the task to delete.\n   */\n  static async deleteTask(id) {\n    try {\n      await apiClient.delete(`/tasks/${id}`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(`Error deleting task ${id}:`, error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  /**\n   * Searches for tasks based on a search term.\n   */\n  static async searchTasks(searchTerm) {\n    try {\n      const response = await apiClient.get('/tasks');\n      const filteredTasks = response.data.filter(task => task.title && task.title.toLowerCase().includes(searchTerm.toLowerCase()) || task.description && task.description.toLowerCase().includes(searchTerm.toLowerCase()) || task.assignee && task.assignee.toLowerCase().includes(searchTerm.toLowerCase()));\n      return {\n        success: true,\n        data: filteredTasks,\n        total: filteredTasks.length\n      };\n    } catch (error) {\n      console.error('Error searching tasks:', error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  // --- NEW: Comment Functions ---\n\n  /**\n   * Fetches all comments for a specific task.\n   * @param {number} taskId The ID of the task.\n   */\n  static async getCommentsForTask(taskId) {\n    try {\n      const response = await apiClient.get(`/tasks/${taskId}/comments`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error(`Error fetching comments for task ${taskId}:`, error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n\n  /**\n   * Creates a new comment for a task.\n   * @param {number} taskId The ID of the task.\n   * @param {object} commentData The comment data (userName, comment).\n   */\n  static async createComment(taskId, commentData) {\n    try {\n      const response = await apiClient.post(`/tasks/${taskId}/comments`, {\n        comment: commentData\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.error(`Error creating comment for task ${taskId}:`, error);\n      return {\n        success: false,\n        error: getErrorMessage(error)\n      };\n    }\n  }\n}\nexport default APIService;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","getErrorMessage","error","response","data","message","statusText","APIService","getAllTasks","get","success","total","length","console","getTaskById","id","createTask","taskData","payload","number","title","status","priority","assignee","description","description_rich_text","descriptionRichText","due_date","Date","toISOString","post","task","updateTask","put","deleteTask","delete","searchTasks","searchTerm","filteredTasks","filter","toLowerCase","includes","getCommentsForTask","taskId","createComment","commentData","comment"],"sources":["/Users/shivaprasad.hiremath/Desktop/rails_demo/Frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// The base URL of your Rails application\nconst API_BASE_URL = 'http://localhost:3000/api';\n\n// Create an axios instance for making API requests\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// --- Helper function for improved error handling ---\nconst getErrorMessage = (error) => {\n  if (error.response && error.response.data && error.response.data.message) {\n    return error.response.data.message;\n  }\n  if (error.response && error.response.statusText) {\n    return error.response.statusText;\n  }\n  return 'An unexpected error occurred.';\n};\n\n\nclass APIService {\n  // ... existing Task methods (getAllTasks, getTaskById, etc.) ...\n\n  /**\n   * Fetches all tasks from the backend.\n   */\n  static async getAllTasks() {\n    try {\n      const response = await apiClient.get('/tasks');\n      return { success: true, data: response.data, total: response.data.length };\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  /**\n   * Fetches a single task by its ID.\n   * @param {number} id The ID of the task.\n   */\n  static async getTaskById(id) {\n    try {\n      const response = await apiClient.get(`/tasks/${id}`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error(`Error fetching task ${id}:`, error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  /**\n   * Creates a new task.\n   * @param {object} taskData The data for the new task.\n   */\n  static async createTask(taskData) {\n    try {\n      const payload = {\n        number: taskData.number,\n        title: taskData.title,\n        status: taskData.status,\n        priority: taskData.priority,\n        assignee: taskData.assignee,\n        description: taskData.description,\n        description_rich_text: taskData.descriptionRichText,\n        due_date: taskData.due_date,\n      };\n\n      if (payload.due_date) {\n        payload.due_date = new Date(`${payload.due_date}T12:00:00`).toISOString();\n      } else {\n        payload.due_date = null;\n      }\n      \n      const response = await apiClient.post('/tasks', { task: payload });\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error('Error creating task:', error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  /**\n   * Updates an existing task.\n   * @param {number} id The ID of the task to update.\n   * @param {object} taskData The new data for the task.\n   */\n  static async updateTask(id, taskData) {\n    try {\n      const payload = {\n        number: taskData.number,\n        title: taskData.title,\n        status: taskData.status,\n        priority: taskData.priority,\n        assignee: taskData.assignee,\n        description: taskData.description,\n        description_rich_text: taskData.descriptionRichText,\n        due_date: taskData.due_date,\n      };\n\n      if (payload.due_date) {\n        payload.due_date = new Date(`${payload.due_date}T12:00:00`).toISOString();\n      } else {\n        payload.due_date = null;\n      }\n\n      const response = await apiClient.put(`/tasks/${id}`, { task: payload });\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error(`Error updating task ${id}:`, error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  /**\n   * Deletes a task by its ID (soft delete).\n   * @param {number} id The ID of the task to delete.\n   */\n  static async deleteTask(id) {\n    try {\n      await apiClient.delete(`/tasks/${id}`);\n      return { success: true };\n    } catch (error) {\n      console.error(`Error deleting task ${id}:`, error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  /**\n   * Searches for tasks based on a search term.\n   */\n  static async searchTasks(searchTerm) {\n     try {\n      const response = await apiClient.get('/tasks');\n      const filteredTasks = response.data.filter(task =>\n        (task.title && task.title.toLowerCase().includes(searchTerm.toLowerCase())) ||\n        (task.description && task.description.toLowerCase().includes(searchTerm.toLowerCase())) ||\n        (task.assignee && task.assignee.toLowerCase().includes(searchTerm.toLowerCase()))\n      );\n      return { success: true, data: filteredTasks, total: filteredTasks.length };\n    } catch (error) {\n      console.error('Error searching tasks:', error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  // --- NEW: Comment Functions ---\n\n  /**\n   * Fetches all comments for a specific task.\n   * @param {number} taskId The ID of the task.\n   */\n  static async getCommentsForTask(taskId) {\n    try {\n      const response = await apiClient.get(`/tasks/${taskId}/comments`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error(`Error fetching comments for task ${taskId}:`, error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n\n  /**\n   * Creates a new comment for a task.\n   * @param {number} taskId The ID of the task.\n   * @param {object} commentData The comment data (userName, comment).\n   */\n  static async createComment(taskId, commentData) {\n    try {\n      const response = await apiClient.post(`/tasks/${taskId}/comments`, { comment: commentData });\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error(`Error creating comment for task ${taskId}:`, error);\n      return { success: false, error: getErrorMessage(error) };\n    }\n  }\n}\n\nexport default APIService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}