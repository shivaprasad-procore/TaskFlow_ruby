{"ast":null,"code":"var _jsxFileName = \"/Users/shivaprasad.hiremath/Desktop/rails_demo/Frontend/src/components/ActivityFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport APIService from '../services/api';\nimport './ActivityFeed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActivityFeed = ({\n  task\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loadingComments, setLoadingComments] = useState(true);\n  useEffect(() => {\n    if (task && task.id) {\n      setLoadingComments(true);\n      APIService.getCommentsForTask(task.id).then(response => {\n        if (response.success) {\n          // The backend returns comments, but the task object also has them.\n          // We can use the ones from the task object directly to avoid another fetch.\n          setComments(response.data || []);\n        }\n        setLoadingComments(false);\n      });\n    }\n  }, [task]);\n  const handlePostComment = async () => {\n    if (!newComment.trim()) return;\n    if (!task.assignee || task.assignee === 'None') {\n      alert('Please select an Assignee for the task before commenting.');\n      return;\n    }\n    const commentData = {\n      userName: task.assignee,\n      comment: newComment\n    };\n    const response = await APIService.createComment(task.id, commentData);\n    if (response.success) {\n      setComments(prevComments => [...prevComments, response.data]);\n      setNewComment(''); // Clear the input field\n    } else {\n      alert(`Failed to post comment: ${response.error}`);\n    }\n  };\n  const formatCommentTime = dateString => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"activity-feed-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activity-feed-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Comments section\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activity-feed-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Add comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePostComment,\n          className: \"post-comment-btn\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-list\",\n        children: loadingComments ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading comments...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this) : comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-avatar\",\n            children: comment.user_name ? comment.user_name.substring(0, 2).toUpperCase() : '??'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"comment-author\",\n                children: comment.userName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"comment-time\",\n                children: formatCommentTime(comment.create_at)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"comment-text\",\n              children: comment.comment\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ActivityFeed, \"gByhl6b/p5szk37nyidlu34BodM=\");\n_c = ActivityFeed;\nexport default ActivityFeed;\nvar _c;\n$RefreshReg$(_c, \"ActivityFeed\");","map":{"version":3,"names":["React","useState","useEffect","APIService","jsxDEV","_jsxDEV","ActivityFeed","task","_s","comments","setComments","newComment","setNewComment","loadingComments","setLoadingComments","id","getCommentsForTask","then","response","success","data","handlePostComment","trim","assignee","alert","commentData","userName","comment","createComment","prevComments","error","formatCommentTime","dateString","date","Date","toLocaleTimeString","hour","minute","hour12","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","map","user_name","substring","toUpperCase","create_at","_c","$RefreshReg$"],"sources":["/Users/shivaprasad.hiremath/Desktop/rails_demo/Frontend/src/components/ActivityFeed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport APIService from '../services/api';\nimport './ActivityFeed.css';\n\nconst ActivityFeed = ({ task }) => {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loadingComments, setLoadingComments] = useState(true);\n\n  useEffect(() => {\n    if (task && task.id) {\n      setLoadingComments(true);\n      APIService.getCommentsForTask(task.id).then(response => {\n        if (response.success) {\n          // The backend returns comments, but the task object also has them.\n          // We can use the ones from the task object directly to avoid another fetch.\n          setComments(response.data || []);\n        }\n        setLoadingComments(false);\n      });\n    }\n  }, [task]);\n\n  const handlePostComment = async () => {\n    if (!newComment.trim()) return;\n\n    if (!task.assignee || task.assignee === 'None') {\n      alert('Please select an Assignee for the task before commenting.');\n      return;\n    }\n\n    const commentData = {\n      userName: task.assignee, \n      comment: newComment,\n    };\n\n    const response = await APIService.createComment(task.id, commentData);\n    if (response.success) {\n      setComments(prevComments => [...prevComments, response.data]);\n      setNewComment(''); // Clear the input field\n    } else {\n      alert(`Failed to post comment: ${response.error}`);\n    }\n  };\n  \n  const formatCommentTime = (dateString) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });\n  };\n\n  return (\n    <div className=\"activity-feed-panel\">\n      <div className=\"activity-feed-header\">\n        <h4>Comments section</h4>\n      </div>\n      <div className=\"activity-feed-body\">\n        <div className=\"comment-input-area\">\n          <textarea\n            value={newComment}\n            onChange={(e) => setNewComment(e.target.value)}\n            placeholder=\"Add comment\"\n          />\n          <button onClick={handlePostComment} className=\"post-comment-btn\">\n            <span>&gt;</span>\n          </button>\n        </div>\n        <div className=\"comment-list\">\n          {loadingComments ? (\n            <p>Loading comments...</p>\n          ) : (\n            comments.map(comment => (\n              <div key={comment.id} className=\"comment-item\">\n                <div className=\"comment-avatar\">{comment.user_name ? comment.user_name.substring(0, 2).toUpperCase() : '??'}</div>\n                <div className=\"comment-content\">\n                  <div className=\"comment-header\">\n                    <span className=\"comment-author\">{comment.userName}</span>\n                    <span className=\"comment-time\">{formatCommentTime(comment.create_at)}</span>\n                  </div>\n                  <p className=\"comment-text\">{comment.comment}</p>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ActivityFeed;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}